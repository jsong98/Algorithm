
class Group {

}

class Department {
    int id;
    int eNum;

}

// 17,000 이하
void init(int N, int[] mId, int mNum[]) {
    N개의 그룹에 대한, 최상위 부서 ID와 부서 인원 수
}

int add(int mId, int mNum, int mParent) {
    mId 부서를 mParent 부서의 하위 부서로 추가
    mId 부서의 인원수는 mNum
    mParent 부서에 이미 3개의 하위 부서가 존재한다면, 추가에 실패하고 return -1
    mId 값으로 이미 존재하는 부서의 ID가 주어지는 경우는 없음
    추가에 성공할 경우, mParent 부서를 포함하여 그 아래 모든 부서의 인원 수 합을 반환
    == mParent가 루트 노드인 서브 트리의 인원 수 합을 반환

}

// 2,000 이하
int remove(int mId) {
    ID가 mId인 부서를 삭제, mId 부서 아래 모든 부서도 함께 삭제
    최솽위 부서의 ID가 주어지는 경우는 x
    ------------이미 삭제된 부서의 ID가 주어질 수도 있음.
    mId 부서가 존재하지 않을 경우, return -1
    mId 부서가 존재할 경우, mId 부서를 포함하여 그 아래 모든 부서의 인원 수 합을 반환

}

// 1,000 이하
int distribute(int K) {
    N개의 그룹에 상품권 K개를 배분 규칙에 맞게 최대한 많이 나누어 주었을 때, 각 그룹에 배분된 상품권 개수 중에서 가장 큰 값을 반환
    1. 총 인원수가 K 이하인 경우, 각 그룹의 인원 수대로 상품권을 나누어 준다.
    2. 총 인원수가 K보다 큰 경우, 상한 개수 L을 정한다. 그룹의 인원 수가 L 이하인 경우에는 그룹의 인원 수대로 상품권을 주고,
    그룹의 인원 수가 L을 초과하는 경우에는 L개의 상품권을 준다.


}