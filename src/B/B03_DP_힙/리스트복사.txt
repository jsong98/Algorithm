// 배열의 깊은 복사 구현
// 리스트의 이름은 길이 1 이상, 20 이하의 알파벳 소문자로 이루어진 문자열이며,
// 문자열의 끝에는 '\0'이 추가되어 있음

/*
마지막 read 부분에서 무거운 작업
실제 변화를 주는 것이 아니라 changeLog를 기록
tree형태로 기록
배열에서 일어날 수 있는 작업 {
    얕은 복사
    깊은 복사
    원소 업데이트
}
위 세 가지 작업을 구분할 수 있는 자료구조 생성     // class Pair
작업이 일어날 때마다, 그 작업을 numbering하고,     // changNumber
numbering한 작업 정보를 저장                   // changeLog[Pair]
그 작업이 일어나기 직전의 작업의 numbering된 번호를 저장    // int[] prevChange
복사 시 복사 전 배열의 정보 저장  // HashMap<String, Integer> address
    얕은 복사면 바로, 깊은 복사면 log작업을 다 해줌
원본 배열들의 마지막 작업 정보 저장    // int[] lastChange

기본 로직 {

}
*/

void init() {
    tc 시작 시 생성되어 있는 리스트는 없음
}

// 10 이하 호출
void makeList(char mName[], int mLength, int mListValue[]) {
    mName 리스트가 생성되어 있지 않음이 보장됨
    mName 리스트를 새로 생성
    mName 리스트의 원소 개수는 mLength개가 됨
    mName 리스트의 i번째 원소의 값은 mListValue[i]가 됨(0 <= i <= mLength - 1
    mName = [mListValue[0], mListValue[1], ..., mListValue[mLength - 1]]

    1 <= mName.length <= 20
    0 <= mLength <= 200,000
    0 <= mListValue[i] <= 32,767


}

// 5,000 이하 호출
void copyList(char mdest[], char mSrc[], bool mCopy) {
    mDest 리스트가 생성되어 있지 않음이 보장
    mSrc 리스트가 생성되어 있음이 보장
    mDest 리스트를 새로 생성
    mSrc 리스트를 mDest 리스트에 복사

    mCopy가 true인 경우, 값을 모두 복사하는 방식을 사용
    이 때, 수행해야 할 작업을 본문의 예시와 같이 나타내면 아래와 같음
    => mDest = mSrc.copy()

    mCopyr가 false인 경우, 주소만 복사하는 방식을 사용
    => mDest = mSrc

    1 <= mDest.length <= 20
    1 <= mSrc.length <= 20
    mCopy = true | false

    String name = mSrc[] to String;
    name의 원본 배열을 찾음
}

// 100,000 이하 호출
void update Element(char mName[], int mIndex, int mValue) {
    mName 리스트의 mIndex번째 원소의 값을 mValue로 변경
    => mName[mIndex] = mValue
    mName 리스트가 생성되어 있음이 보장

    1 <= mName.length <= 20
    0 <= mIndex <= mName.length -1
    0 <= mValue <= 32,767
}

// **400 이하 호출
int element(char mName[], int mIndex) {
    mName 리스트의 mIndex번째 원소를 반환
    mName 리스트가 생성되어 있음이 보장
}


