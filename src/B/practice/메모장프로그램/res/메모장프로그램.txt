/*
H : 메모장의 높이 (1 ≤ H ≤ 300)
W : 메모장의 너비 (1 ≤ W ≤ 300)
Pointer의 위치값: 높이 h, 너비 w
Pointer가 (h, w)에 위치함 = 해당 문자 왼쪽에 위치한 걸로.

TreeSet.tailSet(param1, param2);
    param1보다 큰 부분집합 return
    returnType은 SortedSet
    param2는 부분집합에 param1이 포함되는지 여부를 판단하는 boolean
*/

class NodeComparator implements comparator<Node> {
    @Override
    public int compare(Node n1, Node n2) {
        return Integer.compare(n1.id, n2.id);
    }
}

class Pointer {
  int h;
  int w;
  Node node;
}

class Node {
    long id;
    Node prev;
    char value;
    Node next;
}

// char를 key로, 해당 key를 value로 하는 Node들을 저장하는 TreeSet을 value로 저장
// TreeSet은 Node의 id기준 오름차순
static HashMap<Character, TreeSet<Node>> getNodeSet;

// row를 key로, 해당 row의 첫번째 Node를 value로 저장하는 hashmap
static HashMap<Integer, Node> getRowHead;

// 마지막 node 위치
static int lastElementH;
static int lastElementW;

void init(int H, int W, char mStr[]) {
    /*
    메모장의 높이 H, 너비 W
    문자열은 소문자로만 구성, \0으로 끝남
        문자열의 길이는 1이상, H*W이하
    초기 커서 위치는 문자열의 첫번째 문자 왼쪽
    */


    mStr 순회하면서, LinkedList의 첫번째부터 순차적으로 node 생성 및 연결
        node.id = mStr의 index * 100000;
        getNodeSet에 char에 맞게 저장
        row의 첫번째 node들은 row를 key로 getRowHead에 저장

    Pointer 생성
        초기 h = 0, w = 0, node = 첫번째 문자

    마지막 문자의 h & w값 저장
}

void insert(char mChar) {
    /*
    커서 위치에 문자 mChar를 입력한다.
    입력 후, 커서는 새로 입력된 문자의 오른쪽에 위치
    mChar는 영문 소문자
    문자 입력 후, 문자열의 길이가 H*W를 초과할 수는 없음
    */

    마지막 node에서 insert하는 경우도 고려!

    새 Node 생성, id = Pointer.node.id-1, value = mChar
        getNodeSet에 char에 맞게 저장

    =================================
    같은 위치에 계속해서 insert하는 경우
        node의 왼쪽에만 insert
        node의 property로 long remain 추가
        초기화 시 remain = 90002
        해당 node에 위치해서 추가할 때,
        새로운 node.id = Pointer.node.id-Pointer.node.remain
        remain--;
        중복회피
    =================================


    생성한 Node를 Pointer의 왼쪽에 연결

    Pointer의 h값과 w값 업데이트
    getRowHead의 value 업데이트
        기존 getRowHead들에 저장된 요소들을 꺼내서, prev로 다 바꿔줌
        Row가 추가된 경우, getRowHead에도 추가
    마지막 문자의 row, column 값 업데이트
}

char moveCursor(int mRow, int mCol) {
    /*
    커서의 위치를 메모장의 mRow행 mCol 열 문자의 왼쪽으로 이동
    해당 위치가 비어있는 경우, 커서의 위치를 문자열의 마지막 문자 오른쪽으로 이동
    커서의 다음 문자를 리턴
    커서가 문자열 끝에 위치하여, 커서의 다음 문자가 없는 경우, '$'를 리턴
    */

    mRow를 key로 getRowHead에서 Node 불러옴
        불러올 Node가 없으면 저장된 마지막 위치+1로 Pointer h, w 업데이트, Pointer.node = null
        return "$"
    불러온 Node에서 mCol만큼 이동
        커서가 문자 끝에 위치하면 return "$"

    return Pointer.node.value"
}

int countCharacter(char mChar) {
    /*
    커서 뒤쪽 문자열에서 mChar 문자의 개수를 리턴
    */

    mChar를 key로 getNodeSet에서 TreeSet<Node> 불러옴
    불러온 TreeSet에서 id가 Pointer.node.id보다 큰 값들만 모은 부분집합 메서드 호출

    return 부분집합의 size;
}